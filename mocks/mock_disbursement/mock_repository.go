// Code generated by MockGen. DO NOT EDIT.
// Source: /home/nathan/learning-new/disbursement-service/repository/repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "disbursement-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDisbursement is a mock of IDisbursement interface
type MockIDisbursement struct {
	ctrl     *gomock.Controller
	recorder *MockIDisbursementMockRecorder
}

// MockIDisbursementMockRecorder is the mock recorder for MockIDisbursement
type MockIDisbursementMockRecorder struct {
	mock *MockIDisbursement
}

// NewMockIDisbursement creates a new mock instance
func NewMockIDisbursement(ctrl *gomock.Controller) *MockIDisbursement {
	mock := &MockIDisbursement{ctrl: ctrl}
	mock.recorder = &MockIDisbursementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDisbursement) EXPECT() *MockIDisbursementMockRecorder {
	return m.recorder
}

// RequestDisbursement mocks base method
func (m *MockIDisbursement) RequestDisbursement(ctx context.Context, request *model.FlipRequest) (*model.FlipDisbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestDisbursement", ctx, request)
	ret0, _ := ret[0].(*model.FlipDisbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestDisbursement indicates an expected call of RequestDisbursement
func (mr *MockIDisbursementMockRecorder) RequestDisbursement(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestDisbursement", reflect.TypeOf((*MockIDisbursement)(nil).RequestDisbursement), ctx, request)
}

// GetDisbursementStatus mocks base method
func (m *MockIDisbursement) GetDisbursementStatus(ctx context.Context, request *model.FlipStatusRequest) (*model.FlipDisbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisbursementStatus", ctx, request)
	ret0, _ := ret[0].(*model.FlipDisbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisbursementStatus indicates an expected call of GetDisbursementStatus
func (mr *MockIDisbursementMockRecorder) GetDisbursementStatus(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisbursementStatus", reflect.TypeOf((*MockIDisbursement)(nil).GetDisbursementStatus), ctx, request)
}

// MockIDatabase is a mock of IDatabase interface
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// GetListDisbursement mocks base method
func (m *MockIDatabase) GetListDisbursement(ctx context.Context, request interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListDisbursement", ctx, request)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListDisbursement indicates an expected call of GetListDisbursement
func (mr *MockIDatabaseMockRecorder) GetListDisbursement(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListDisbursement", reflect.TypeOf((*MockIDatabase)(nil).GetListDisbursement), ctx, request)
}

// GetDetailDisbursement mocks base method
func (m *MockIDatabase) GetDetailDisbursement(ctx context.Context, id int64) (*model.Disbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailDisbursement", ctx, id)
	ret0, _ := ret[0].(*model.Disbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailDisbursement indicates an expected call of GetDetailDisbursement
func (mr *MockIDatabaseMockRecorder) GetDetailDisbursement(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailDisbursement", reflect.TypeOf((*MockIDatabase)(nil).GetDetailDisbursement), ctx, id)
}

// InsertDetailDisbursement mocks base method
func (m *MockIDatabase) InsertDetailDisbursement(ctx context.Context, request interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDetailDisbursement", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDetailDisbursement indicates an expected call of InsertDetailDisbursement
func (mr *MockIDatabaseMockRecorder) InsertDetailDisbursement(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDetailDisbursement", reflect.TypeOf((*MockIDatabase)(nil).InsertDetailDisbursement), ctx, request)
}

// UpdateDetailDisbursement mocks base method
func (m *MockIDatabase) UpdateDetailDisbursement(ctx context.Context, data *model.Disbursement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetailDisbursement", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDetailDisbursement indicates an expected call of UpdateDetailDisbursement
func (mr *MockIDatabaseMockRecorder) UpdateDetailDisbursement(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetailDisbursement", reflect.TypeOf((*MockIDatabase)(nil).UpdateDetailDisbursement), ctx, data)
}

// SaveLogDetailDisbursement mocks base method
func (m *MockIDatabase) SaveLogDetailDisbursement(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogDetailDisbursement", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLogDetailDisbursement indicates an expected call of SaveLogDetailDisbursement
func (mr *MockIDatabaseMockRecorder) SaveLogDetailDisbursement(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogDetailDisbursement", reflect.TypeOf((*MockIDatabase)(nil).SaveLogDetailDisbursement), ctx, id)
}
